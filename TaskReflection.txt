Моё решение использовало приватную функцию transfer_to_cleaner, а не передавало интерфейсную функцию управления роботом transfer_to_cleaner как параметра в конструктор.
Я считаю это минусом и снижением гибкости решения. Вариант из возможного решения лучше, т.к. намного более гибкий.

Переделал на вариант с передачей функции управления роботом через делегат в конструкторе. 
К минусам работы с делегатом отнесу меньшую гибкость, по сравнению со ссылкой на функцию в Python.

К плюсам моего решения могу отнести более строгую проверку установления значения угла с помощью свойства AngleInDegrees в состоянии State. 
В результате угол задаётся строго в рамках от 0 до 360 радусов.

Ещё одним плюсом является то, что команды задаются в файле, а не жёстко прописаны в коде, как в возможном решении. 
Это позволяет гибко управлять программой робота без перекомпиляции исходного кода, а только изменением текстового файла inputCommands.txt

